@using CornhacksProject.Models
@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    <br/>
    <input type="search" id="searchBox" placeholder="Search for a city" class="form-control" style="margin-left: 15px;"/>
    <br/>
    <div class="col-md-10">
        <div id="map"></div>
    </div>
    <div class="col-md-2">
        <h4>Searched Locations</h4>
        <ul id="previousLocations">

        </ul>
    </div>
</div>

@section scripts
{
    @* google maps script *@
    <script src="https://maps.googleapis.com/maps/api/js?key=@(Constants.googleMapsApiKey)&libraries=places"
            type="text/javascript"></script>

    <script type="text/javascript">
        // script that runs when the page finishes loading
        $(document).ready(function () {
            // defer execution slightly to finish getting map api js
            setTimeout(makeMap(), 250);

            toastr.options = {
                "positionClass": "toast-top-center"
            };
        });

        var glbMap;
        var bounds = new google.maps.LatLngBounds();

        // initialize map on screen with cornhacks location!
        function makeMap() {
            var birthplace = new google.maps.LatLng(40.816303, -96.702351 );
            var map = new google.maps.Map(
                document.getElementById('map'),
                { zoom: 18, center: birthplace }
            );
            var marker = new google.maps.Marker({
                position: birthplace,
                map: map,
                title: 'Cornhacks 2020 location!'
            });
            glbMap = map;
            bounds.extend(birthplace);
        }

        // event handler for search submit
        $('#searchBox').on('change', function (event) {
            // build request for maps api
            var request = {
                query: $('#searchBox').val(),
                fields: ['name', 'geometry', 'formatted_address']
            };

            // check for blank string
            if (/\S/.test(request.query) && request.query !== null) {

                // init maps service for our map object
                var service = new google.maps.places.PlacesService(glbMap);

                // find location from query, add marker, change map size, update location list
                service.findPlaceFromQuery(request, function (results, status) {
                    if (status === google.maps.places.PlacesServiceStatus.OK && results.length > 0) {
                        for (let i = 0; i < results.length; i++) {
                            var latLngArr = results[i].geometry.location;
                            var latLng = new google.maps.LatLng(latLngArr.lat(), latLngArr.lng());

                            // formatted address: we expect city, state, country (usa)
                            // possibilities include state, country, 
                            var city_state = results[i].formatted_address.split(',');
                            var city, state;
                            if (city_state.length < 3) {
                                toastr['error']('Invalid search term: result does not include a city', 'Error');
                                return;
                            } else if (city_state.length == 3) {
                                city = city_state[0];
                                state = city_state[1];
                            } else {
                                city = city_state[1];
                                state = city_state[2];
                            }
                            city = city.trim();
                            state = state.trim();
                            // check state for numbers (sometimes returns ex: "NE 68516  " instead of simply "NE")
                            if (/\d/.test(state)) {
                                // replace digits and whitespace with empty char
                                state = state.replace(/[0-9]/g, '').replace(/\s/g,'');
                            }
                            console.log('city: "' + city + '" state: "' + state + '"');
                            // ajax call to get sustainability score
                            toastr['info']('loading');
                            $.ajax({
                                type: 'GET',
                                url: '@Html.Raw(Url.Action("SustainabilityScore", "Home"))',
                                data: {
                                    city: city,
                                    state: state
                                },
                                cache: false
                            }).done(function (score, local_status) {
                                toastr.clear();
                                if (local_status === 'success') {
                                    var span;
                                    if (score > 7) {
                                        span = ' <span class="glyphicon glyphicon-ok-circle" style="color: green;">' + score + '</span>';
                                    } else if (score > 4) {
                                        span = ' <span class="glyphicon glyphicon-ok-sign" style="color: lightblue;">' + score + '</span>';
                                    } else {
                                        span = ' <span class="glyphicon glyphicon-ban-circle" style="color: red;">' + score + '</span>';
                                    }

                                    $('#previousLocations').append('<li>' + results[i].name + span + '</li>');
                                } else {
                                    toastr['error']('An unknown error occurred :(', 'Error');
                                }
                            });
                            
                            var marker = new google.maps.Marker({
                                position: latLng,
                                map: glbMap,
                                title: results[i].name
                            });
                            bounds.extend(latLng);

                        }
                        glbMap.fitBounds(bounds);
                    } else {
                        toastr['error']('Search returned no results', 'Error');
                    }
                });
            }
        });

    </script>
}
